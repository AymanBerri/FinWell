// SidebarNav Component
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import List from '@mui/material/List';
import ListItem from '@mui/material/ListItem';
import ListItemText from '@mui/material/ListItemText';
import Divider from '@mui/material/Divider';

import Dialog from '@mui/material/Dialog';
import DialogTitle from '@mui/material/DialogTitle';

import Snackbar from '@mui/material/Snackbar';
import MuiAlert from '@mui/material/Alert';

import IncomeDialog from '../../layouts/Income/IncomeDialog';
import ExpenseDialog from '../../layouts/Expense/ExpenseDialog';

import DashboardIcon from '@mui/icons-material/Dashboard';
import AttachMoneyIcon from '@mui/icons-material/AttachMoney';
import SavingsIcon from '@mui/icons-material/Savings';
import ReceiptLongIcon from '@mui/icons-material/ReceiptLong';
import AddIcon from '@mui/icons-material/Add';

const Alert = React.forwardRef(function Alert(props, ref) {
  return <MuiAlert elevation={6} ref={ref} variant="filled" {...props} />;
});

const Sidebar = () => {
  const navigate = useNavigate();

  // State variables for Dialogs
  const [incomeDialogOpen, setIncomeDialogOpen] = useState(false);
  const [expenseDialogOpen, setExpenseDialogOpen] = useState(false);

  const [dialogMode, setDialogMode] = useState('add'); // State variable for managing dialog mode (e.g., 'add' or 'edit')

  // State variables for Snackbar
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarSeverity, setSnackbarSeverity] = useState('success');
  const [snackbarMessage, setSnackbarMessage] = useState('');

  const pages = [
    { path: 'dashboard', name: 'Dashboard', icon: <DashboardIcon /> },
    { path: 'income', name: 'Income', icon: <AttachMoneyIcon /> },
    { path: 'expense', name: 'Expense', icon: <ReceiptLongIcon /> },
    // { path: 'savings', name: 'Savings', icon: <SavingsIcon /> },
  ];

  const handleAddClick = (path) => {
    switch (path) {
      case 'income':
        setIncomeDialogOpen(true);
        break;

      case 'expense':
        setExpenseDialogOpen(true);
        break;
      // Add cases for other pages as needed

      default:
        break;
    }
  };

  // Function to show Snackbar
  const showSnackbar = (severity, message) => {
    setSnackbarSeverity(severity);
    setSnackbarMessage(message);
    setSnackbarOpen(true);
  };

  // Function to hide Snackbar
  const hideSnackbar = () => {
    setSnackbarOpen(false);
  };

  return (
    <div style={{ height: '100%', width: '250px', backgroundColor: 'white', padding: '20px', borderRight: '1px solid #ccc' }}>

      <List>
        {pages.map((page, index) => (
          <React.Fragment key={page.path}>
            <div style={{ display: 'flex', justifyContent: 'space-between' }}>
              <ListItem button component={Link} to={`/portal/${page.path}`}>
                {page.icon}
                <ListItemText primary={page.name} />
              </ListItem>
              {/* Conditionally render the add button */}
              {page.path !== 'dashboard' && (
                <ListItem button onClick={() => handleAddClick(page.path)} style={{ width: '60px', marginLeft: '10px' }}>
                  <AddIcon />
                </ListItem>
              )}
            </div>
            {index < pages.length - 1 && <Divider />}
          </React.Fragment>
        ))}
      </List>

      {/* Dialogs */}
      <Dialog open={incomeDialogOpen} onClose={() => setIncomeDialogOpen(false)}>
        <DialogTitle>Add Income</DialogTitle>
        <IncomeDialog onClose={() => setIncomeDialogOpen(false)} showSnackbar={showSnackbar}  mode={dialogMode}/>
      </Dialog>

      <Dialog open={expenseDialogOpen} onClose={() => setExpenseDialogOpen(false)}>
        <DialogTitle>Add Expense</DialogTitle>
        <ExpenseDialog onClose={() => setExpenseDialogOpen(false)} showSnackbar={showSnackbar} mode={dialogMode} />
      </Dialog>

      {/* Snackbar for success/error messages */}
      <Snackbar
        open={snackbarOpen}
        autoHideDuration={6000}
        onClose={hideSnackbar}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }}
      >
        <Alert variant='standard' onClose={hideSnackbar} severity={snackbarSeverity}>
          {snackbarMessage}
        </Alert>
      </Snackbar>
    </div>
  );
};

export default Sidebar;
